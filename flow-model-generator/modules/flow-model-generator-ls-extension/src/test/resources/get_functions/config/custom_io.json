{
  "description": "Sample flow model",
  "source": "proj/main.bal",
  "position": {
    "startLine": {
      "line": 2,
      "offset": 0
    },
    "endLine": {
      "line": 4,
      "offset": 1
    }
  },
  "queryMap": {
    "q": "Io",
    "limit": "10",
    "offset": "0"
  },
  "categories": [
    {
      "metadata": {
        "label": "Project",
        "description": "Functions defined within the project",
        "keywords": [
          "Project",
          "Local",
          "Function"
        ]
      },
      "items": []
    },
    {
      "metadata": {
        "label": "Utilities",
        "description": "Reusable functions from external libraries",
        "keywords": [
          "Utility",
          "Library",
          "Function",
          "External"
        ]
      },
      "items": [
        {
          "metadata": {
            "label": "io",
            "description": "This package provides file read/write APIs and console print/read APIs. The file APIs allow read and write operations on different kinds of file types such as bytes, text, CSV, JSON, and XML. Further, these file APIs can be categorized as streaming and non-streaming APIs.",
            "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
          },
          "items": [
            {
              "metadata": {
                "label": "createReadableChannel",
                "description": "Creates an in-memory channel, which will be a reference stream of bytes.\n```ballerina\nvar byteChannel = io:createReadableChannel(content);\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "createReadableChannel",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadBlocksAsStream",
                "description": "Read the entire file content as a stream of blocks.\n```ballerina\nstream<io:Block, io:Error?>|io:Error content = io:fileReadBlocksAsStream(\"./resources/myfile.txt\", 1000);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadBlocksAsStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadBytes",
                "description": "Read the entire file content as a byte array.\n```ballerina\nbyte[]|io:Error content = io:fileReadBytes(\"./resources/myfile.txt\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadBytes",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadCsv",
                "description": "Read file content as a CSV.\nWhen the expected data type is record[], the first entry of the csv file should contain matching headers.\n```ballerina\nstring[][]|io:Error content = io:fileReadCsv(\"./resources/myfile.csv\");\nrecord{}[]|io:Error content = io:fileReadCsv(\"./resources/myfile.csv\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadCsv",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadCsvAsStream",
                "description": "Read file content as a CSV.\nWhen the expected data type is stream<record, io:Error?>,\nthe first entry of the csv file should contain matching headers.\n```ballerina\nstream<string[]|io:Error content = io:fileReadCsvAsStream(\"./resources/myfile.csv\");\nstream<record{}, io:Error?>|io:Error content = io:fileReadCsvAsStream(\"./resources/myfile.csv\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadCsvAsStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadJson",
                "description": "Reads file content as a JSON.\n```ballerina\njson|io:Error content = io:fileReadJson(\"./resources/myfile.json\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadJson",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadLines",
                "description": "Reads the entire file content as a list of lines.\nThe resulting string array does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstring[]|io:Error content = io:fileReadLines(\"./resources/myfile.txt\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadLines",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadLinesAsStream",
                "description": "Reads file content as a stream of lines.\nThe resulting stream does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstream<string, io:Error?>|io:Error content = io:fileReadLinesAsStream(\"./resources/myfile.txt\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadLinesAsStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadString",
                "description": "Reads the entire file content as a `string`.\nThe resulting string output does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstring|io:Error content = io:fileReadString(\"./resources/myfile.txt\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadString",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadXml",
                "description": "Reads file content as an XML.\n```ballerina\nxml|io:Error content = io:fileReadXml(\"./resources/myfile.xml\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadXml",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteBlocksFromStream",
                "description": "Write a byte stream to a file.\n```ballerina\nbyte[] content = [[60, 78, 39, 28]];\nstream<byte[], io:Error?> byteStream = content.toStream();\nio:Error? result = io:fileWriteBlocksFromStream(\"./resources/myfile.txt\", byteStream);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteBlocksFromStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteBytes",
                "description": "Write a set of bytes to a file.\n```ballerina\nbyte[] content = [60, 78, 39, 28];\nio:Error? result = io:fileWriteBytes(\"./resources/myfile.txt\", content);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteBytes",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteCsv",
                "description": "Write CSV content to a file.\nWhen the input is a record[] type in `OVERWRITE`,  headers will be written to the CSV file by default.\nFor `APPEND`, order of the existing csv file is inferred using the headers and used as the order.\n```ballerina\ntype Coord record {int x;int y;};\nCoord[] contentRecord = [{x: 1,y: 2},{x: 1,y: 2}]\nstring[][] content = [[\"Anne\", \"Johnson\", \"SE\"], [\"John\", \"Cameron\", \"QA\"]];\nio:Error? result = io:fileWriteCsv(\"./resources/myfile.csv\", content);\nio:Error? resultRecord = io:fileWriteCsv(\"./resources/myfileRecord.csv\", contentRecord);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteCsv",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteCsvFromStream",
                "description": "Write CSV record stream to a file.\nWhen the input is a `stream<record, io:Error?>` in `OVERWRITE`,  headers will be written to the CSV file by default.\nFor `APPEND`, order of the existing csv file is inferred using the headers and used as the order.\n```ballerina\ntype Coord record {int x;int y;};\nCoord[] contentRecord = [{x: 1,y: 2},{x: 1,y: 2}]\nstring[][] content = [[\"Anne\", \"Johnson\", \"SE\"], [\"John\", \"Cameron\", \"QA\"]];\nstream<string[], io:Error?> stringStream = content.toStream();\nstream<Coord, io:Error?> recordStream = contentRecord.toStream();\nio:Error? result = io:fileWriteCsvFromStream(\"./resources/myfile.csv\", stringStream);\nio:Error? resultRecord = io:fileWriteCsvFromStream(\"./resources/myfileRecord.csv\", recordStream);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteCsvFromStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteJson",
                "description": "Write a JSON to a file.\n```ballerina\njson content = {\"name\": \"Anne\", \"age\": 30};\nio:Error? result = io:fileWriteJson(\"./resources/myfile.json\", content);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteJson",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteLines",
                "description": "Write an array of lines to a file.\nDuring the writing operation, a newline character `\\n` will be added after each line.\n```ballerina\nstring[] content = [\"Hello Universe..!!\", \"How are you?\"];\nio:Error? result = io:fileWriteLines(\"./resources/myfile.txt\", content);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteLines",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteLinesFromStream",
                "description": "Write stream of lines to a file.\nDuring the writing operation, a newline character `\\n` will be added after each line.\n```ballerina\nstring content = [\"Hello Universe..!!\", \"How are you?\"];\nstream<string, io:Error?> lineStream = content.toStream();\nio:Error? result = io:fileWriteLinesFromStream(\"./resources/myfile.txt\", lineStream);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteLinesFromStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteString",
                "description": "Write a string content to a file.\n```ballerina\nstring content = \"Hello Universe..!!\";\nio:Error? result = io:fileWriteString(\"./resources/myfile.txt\", content);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteString",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileWriteXml",
                "description": "Write XML content to a file.\n```ballerina\nxml content = xml `<book>The Lost World</book>`;\nio:Error? result = io:fileWriteXml(\"./resources/myfile.xml\", content);\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileWriteXml",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fprint",
                "description": "Prints `any`, `error`, or string templates(such as `The respective int value is ${val}`) value(s) to\na given stream(STDOUT or STDERR).\n```ballerina\nio:fprint(io:stderr, \"Unexpected error occurred\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fprint",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fprintln",
                "description": "Prints `any`, `error`, or string templates(such as `The respective int value is ${val}`) value(s) to\na given stream(STDOUT or STDERR) followed by a new line.\n```ballerina\nio:fprintln(io:stderr, \"Unexpected error occurred\");\n```\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fprintln",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "openReadableCsvFile",
                "description": "Retrieves a readable CSV channel from a given file path.\n```ballerina\nio:ReadableCSVChannel rCsvChannel = check io:openReadableCsvFile(srcFileName);\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "openReadableCsvFile",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "openReadableFile",
                "description": "Retrieves a `ReadableByteChannel` from a given file path.\n```ballerina\nio:ReadableByteChannel readableFieldResult = check io:openReadableFile(\"./files/sample.txt\");\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "openReadableFile",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "openWritableCsvFile",
                "description": "Retrieves a writable CSV channel from a given file path.\n```ballerina\nio:WritableCSVChannel wCsvChannel = check io:openWritableCsvFile(srcFileName);\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "openWritableCsvFile",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "openWritableFile",
                "description": "Retrieves a `WritableByteChannel` from a given file path.\n```ballerina\nio:WritableByteChannel writableFileResult = check io:openWritableFile(\"./files/sampleResponse.txt\");\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "openWritableFile",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "print",
                "description": "Prints `any`, `error`, or string templates (such as `The respective int value is ${val}`) value(s) to the `STDOUT`.\n```ballerina\nio:print(\"Start processing the CSV file from \", srcFileName);\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "print",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "println",
                "description": "Prints `any`, `error` or string templates(such as `The respective int value is ${val}`) value(s) to the STDOUT\nfollowed by a new line.\n```ballerina\nio:println(\"Start processing the CSV file from \", srcFileName);\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "println",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "readln",
                "description": "Retrieves the input read from the STDIN.\n```ballerina\nstring choice = io:readln(\"Enter choice 1 - 5: \");\nstring choice = io:readln();\n```\n\n"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "readln",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "createReadableChannel",
                "description": "Creates an in-memory channel, which will be a reference stream of bytes.\n```ballerina\nvar byteChannel = io:createReadableChannel(content);\n```\n\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "createReadableChannel",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadBlocksAsStream",
                "description": "Read the entire file content as a stream of blocks.\n```ballerina\nstream<io:Block, io:Error?>|io:Error content = io:fileReadBlocksAsStream(\"./resources/myfile.txt\", 1000);\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadBlocksAsStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadBytes",
                "description": "Read the entire file content as a byte array.\n```ballerina\nbyte[]|io:Error content = io:fileReadBytes(\"./resources/myfile.txt\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadBytes",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadCsv",
                "description": "Read file content as a CSV.\nWhen the expected data type is record[], the first entry of the csv file should contain matching headers.\n```ballerina\nstring[][]|io:Error content = io:fileReadCsv(\"./resources/myfile.csv\");\nrecord{}[]|io:Error content = io:fileReadCsv(\"./resources/myfile.csv\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadCsv",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadCsvAsStream",
                "description": "Read file content as a CSV.\nWhen the expected data type is stream<record, io:Error?>,\nthe first entry of the csv file should contain matching headers.\n```ballerina\nstream<string[]|io:Error content = io:fileReadCsvAsStream(\"./resources/myfile.csv\");\nstream<record{}, io:Error?>|io:Error content = io:fileReadCsvAsStream(\"./resources/myfile.csv\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadCsvAsStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadJson",
                "description": "Reads file content as a JSON.\n```ballerina\njson|io:Error content = io:fileReadJson(\"./resources/myfile.json\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadJson",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadLines",
                "description": "Reads the entire file content as a list of lines.\nThe resulting string array does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstring[]|io:Error content = io:fileReadLines(\"./resources/myfile.txt\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadLines",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadLinesAsStream",
                "description": "Reads file content as a stream of lines.\nThe resulting stream does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstream<string, io:Error?>|io:Error content = io:fileReadLinesAsStream(\"./resources/myfile.txt\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadLinesAsStream",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadString",
                "description": "Reads the entire file content as a `string`.\nThe resulting string output does not contain the terminal carriage (e.g., `\\r` or `\\n`).\n```ballerina\nstring|io:Error content = io:fileReadString(\"./resources/myfile.txt\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadString",
                "version": "1.6.1"
              },
              "enabled": true
            },
            {
              "metadata": {
                "label": "fileReadXml",
                "description": "Reads file content as an XML.\n```ballerina\nxml|io:Error content = io:fileReadXml(\"./resources/myfile.xml\");\n```\n",
                "icon": "https://bcentral-packageicons.azureedge.net/images/ballerina_io_1.6.1.png"
              },
              "codedata": {
                "node": "FUNCTION_CALL",
                "org": "ballerina",
                "module": "io",
                "symbol": "fileReadXml",
                "version": "1.6.1"
              },
              "enabled": true
            }
          ]
        }
      ]
    }
  ]
}
